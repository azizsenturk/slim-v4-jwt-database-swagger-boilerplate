{
	"Create new controller": {
		"prefix": "controller",
		"body": [
			"<?php",
			"",
			"declare (strict_types = 1);",
			"",
			"namespace App\\Controller;",
			"",
			"use Core\\Base\\BaseController;",
			"use OpenApi\\Attributes as OA;",
			"use Psr\\Container\\ContainerInterface;",
			"use Psr\\Http\\Message\\ResponseInterface as Response;",
			"use Psr\\Http\\Message\\ServerRequestInterface as Request;",
			"use Utils\\Libs\\Validator;",
			"",
			"final class ${1:${TM_FILENAME_BASE/(Controller)//gi}}Controller extends BaseController {",
			"\tprotected \\$repository;",
			"",
			"\tpublic function __construct(ContainerInterface \\$container) {",
			"\t\t\\$this->repository = \\$container->get('${1:${TM_FILENAME_BASE/(Controller)//gi}}Repository');",
			"\t\tparent::__construct(\\$container);",
			"\t}",
			"",
			"\t#[OA\\Post(",
			"\t\tpath: '/v1/${1}/GetAll',",
			"\t\tsummary: 'It is used to get all ${1}s in the system.',",
			"\t\ttags: ['${1}'],",
			"\t\tsecurity: [['Bearer' => []]],",
			"\t\trequestBody: new OA\\RequestBody(content: new OA\\JsonContent(ref: '#/components/schemas/FreeModel')),",
			"\t\tresponses: [new OA\\Response(response: 200, description: 'Success', content: new OA\\JsonContent(ref: '#/components/schemas/FreeModel'))]",
			"\t)]",
			"\tpublic function GetAll(Request \\$request, Response \\$response): Response {",
			"\t\t",
			"\t}",
			"",
			"\t#[OA\\Get(",
			"\t\tpath: '/v1/${1}/GetSingle',",
			"\t\tsummary: 'It is used to get the ${1} in the system.',",
			"\t\ttags: ['${1}'],",
			"\t\tsecurity: [['Bearer' => []]],",
			"\t\tparameters: [new OA\\Parameter(name: 'id', in: 'query', description: '${1} Id', schema: new OA\\Schema(type: 'string'))],",
			"\t\tresponses: [new OA\\Response(response: 200, description: 'Success', content: new OA\\JsonContent(ref: '#/components/schemas/FreeModel'))],",
			"\t)]",
			"\tpublic function GetSingle(Request \\$request, Response \\$response): Response {",
			"",
			"\t\t\\$id = \\$request->getQueryParams()['id'];",
			"\t\tValidator::Required(\\$id, 'Id is required.');",
			"",
			"\t\t\\$data = \\$this->repository->GetSingle(\\$id);",
			"\t\treturn \\$this->withJson(\\$response, \\$data, 200);",
			"",
			"\t}",
			"",
			"\t#[OA\\Post(",
			"\t\tpath: '/v1/${1}/Create',",
			"\t\tsummary: 'It is used to add a new ${1} to the system.',",
			"\t\ttags: ['${1}'],",
			"\t\tsecurity: [['Bearer' => []]],",
			"\t\trequestBody: new OA\\RequestBody(content: new OA\\JsonContent(ref: '#/components/schemas/FreeModel')),",
			"\t\tresponses: [new OA\\Response(response: 200, description: 'Success', content: new OA\\JsonContent(ref: '#/components/schemas/FreeModel'))],",
			"\t)]",
			"\tpublic function Create(Request \\$request, Response \\$response): Response {",
			"",
			"\t\t\\$payloadData = \\$request->getParsedBody();",
			"\t\tValidator::Required(\\$payloadData['email'], 'Email is required.');",
			"\t\tValidator::Email(\\$payloadData['email']);",
			"",
			"\t\t\\$data = \\$this->repository->Create(\\$payloadData);",
			"\t\treturn \\$this->withJson(\\$response, \\$data, 201);",
			"",
			"\t}",
			"",
			"\t#[OA\\Put(",
			"\t\tpath: '/v1/${1}/Update',",
			"\t\tsummary: 'It is used to update the ${1} in the system.',",
			"\t\ttags: ['${1}'],",
			"\t\tsecurity: [['Bearer' => []]],",
			"\t\trequestBody: new OA\\RequestBody(content: new OA\\JsonContent(ref: '#/components/schemas/FreeModel')),",
			"\t\tresponses: [new OA\\Response(response: 200, description: 'Success', content: new OA\\JsonContent(ref: '#/components/schemas/FreeModel'))],",
			"\t)]",
			"\tpublic function Update(Request \\$request, Response \\$response): Response {",
			"",
			"\t\t\\$payloadData = \\$request->getParsedBody();",
			"\t\tValidator::Required(\\$payloadData['id'], 'Id is required.');",
			"\t\tValidator::Required(\\$payloadData['email'], 'Email is required.');",
			"\t\tValidator::Email(\\$payloadData['email']);",
			"",
			"\t\t\\$data = \\$this->repository->Update(\\$payloadData);",
			"\t\treturn \\$this->withJson(\\$response, \\$data, 200);",
			"",
			"\t}",
			"",
			"\t#[OA\\Delete(",
			"\t\tpath: '/v1/${1}/Delete',",
			"\t\tsummary: 'It is used to delete the ${1} in the system.',",
			"\t\ttags: ['${1}'],",
			"\t\tsecurity: [['Bearer' => []]],",
			"\t\tparameters: [new OA\\Parameter(name: 'id', in: 'query', description: '${1} Id', schema: new OA\\Schema(type: 'string'))],",
			"\t\tresponses: [new OA\\Response(response: 200, description: 'Success')],",
			"\t)]",
			"\tpublic function Delete(Request \\$request, Response \\$response): Response {",
			"",
			"\t\t\\$id = \\$request->getQueryParams()['id'];",
			"\t\tValidator::Required(\\$id, 'Id is required.');",
			"",
			"\t\t\\$data = \\$this->repository->Delete(\\$id);",
			"\t\treturn \\$this->withJson(\\$response, \\$data, 200);",
			"",
			"\t}",
			"",
			"}"
		],
		"description": "Create a new controller."
	},
	"Get method for controller":{
		"prefix": "controller-get",
		"body": [
			"#[OA\\Get(",
			"\tpath: '/v1/${1:Path}/${2:Endpoint}',",
			"\tsummary: 'It is used to get the ${1:Path} in the system.',",
			"\ttags: ['${1:Path}'],",
			"\tsecurity: [['Bearer' => []]],",
			"\tparameters: [new OA\\Parameter(name: 'id', in: 'query', description: '${1:Path} Id', schema: new OA\\Schema(type: 'string'))],",
			"\tresponses: [new OA\\Response(response: 200, description: 'Success', content: new OA\\JsonContent(ref: '#/components/schemas/FreeModel'))],",
			")]",
			"public function ${2:Endpoint}(Request \\$request, Response \\$response): Response {",
			"",
			"\t\\$id = \\$request->getQueryParams()['id'];",
			"\tValidator::Required(\\$id, 'Id is required.');",
			"",
			"\t\\$data = \\$this->repository->${2:Endpoint}(\\$id);",
			"\treturn \\$this->withJson(\\$response, \\$data, 200);",
			"",
			"}"
		],
		"description": "Create a new get method."

	},
	"Post method for controller": {
		"prefix": "controller-post",
		"body": [
			"#[OA\\Post(",
			"\tpath: '/v1/${1:Path}/${2:Endpoint}',",
			"\tsummary: 'It is used to add a new ${1:Path} to the system.',",
			"\ttags: ['${1:Path}'],",
			"\tsecurity: [['Bearer' => []]],",
			"\trequestBody: new OA\\RequestBody(content: new OA\\JsonContent(ref: '#/components/schemas/FreeModel')),",
			"\tresponses: [new OA\\Response(response: 200, description: 'Success', content: new OA\\JsonContent(ref: '#/components/schemas/FreeModel'))],",
			")]",
			"public function ${2:Endpoint}(Request \\$request, Response \\$response): Response {",
			"",
			"\t\\$payloadData = \\$request->getParsedBody();",
			"\tValidator::Required(\\$payloadData['email'], 'Email is required.');",
			"\tValidator::Email(\\$payloadData['email']);",
			"",
			"\t\\$data = \\$this->repository->${2:Endpoint}(\\$payloadData);",
			"\treturn \\$this->withJson(\\$response, \\$data, 201);",
			"",
			"}"
		],
		"description": "Create a new post method."
	},
	"Put method for controller": {
		"prefix": "controller-put",
		"body": [
			"#[OA\\Put(",
			"\tpath: '/v1/${1:Path}/${2:Endpoint}',",
			"\tsummary: 'It is used to update the ${1:Path} in the system.',",
			"\ttags: ['${1:Path}'],",
			"\tsecurity: [['Bearer' => []]],",
			"\trequestBody: new OA\\RequestBody(content: new OA\\JsonContent(ref: '#/components/schemas/FreeModel')),",
			"\tresponses: [new OA\\Response(response: 200, description: 'Success', content: new OA\\JsonContent(ref: '#/components/schemas/FreeModel'))],",
			")]",
			"public function ${2:Endpoint}(Request \\$request, Response \\$response): Response {",
			"",
			"\t\\$payloadData = \\$request->getParsedBody();",
			"\tValidator::Required(\\$payloadData['id'], 'Id is required.');",
			"\tValidator::Required(\\$payloadData['email'], 'Email is required.');",
			"\tValidator::Email(\\$payloadData['email']);",
			"",
			"\t\\$data = \\$this->repository->${2:Endpoint}(\\$payloadData);",
			"\treturn \\$this->withJson(\\$response, \\$data, 200);",
			"",
			"}"
		],
		"description": "Create a new put method."
	},
	"Delete method for controller": {
		"prefix": "controller-delete",
		"body": [
			"#[OA\\Delete(",
			"\tpath: '/v1/${1:Path}/${2:Endpoint}',",
			"\tsummary: 'It is used to delete the ${1:Path} in the system.',",
			"\ttags: ['${1:Path}'],",
			"\tsecurity: [['Bearer' => []]],",
			"\tparameters: [new OA\\Parameter(name: 'id', in: 'query', description: '${1:Path} Id', schema: new OA\\Schema(type: 'string'))],",
			"\tresponses: [new OA\\Response(response: 200, description: 'Success')],",
			")]",
			"public function ${2:Endpoint}(Request \\$request, Response \\$response): Response {",
			"",
			"\t\\$id = \\$request->getQueryParams()['id'];",
			"\tValidator::Required(\\$id, 'Id is required.');",
			"",
			"\t\\$data = \\$this->repository->${2:Endpoint}(\\$id);",
			"\treturn \\$this->withJson(\\$response, \\$data, 200);",
			"",
			"}"
		],
		"description": "Create a new delete method."
	}
}
