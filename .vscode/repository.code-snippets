{
	"Create new repository": {
		"prefix": "repository",
		"body": [
			"<?php",
			"",
			"declare (strict_types = 1);",
			"",
			"namespace App\\Repository;",
			"",
			"use App\\Model\\FreeModel;",
			"use Psr\\Container\\ContainerInterface;",
			"use Utils\\Libs\\Converter;",
			"use Utils\\Libs\\Validator;",
			"use Utils\\Service\\Generator;",
			"",
			"class ${1:${TM_FILENAME_BASE/(Repository)//gi}}Repository {",
			"\tprivate \\$pdo, \\$table;",
			"",
			"\tpublic function __construct(ContainerInterface \\$container) {",
			"\t\t\\$this->pdo = \\$container->get('pdo');",
			"\t\t\\$this->table = '${2:tableName}';",
			"\t}",
			"",
			"\tpublic function GetAll(): array {",
			"",
			"\t\t\\$itemList = \\$this->pdo->table(\\$this->table)->getAll();",
			"",
			"\t\t\\$recordList = [];",
			"\t\tforeach (\\$itemList as \\$item) {",
			"\t\t\t\\$recordList[] = new FreeModel(\\$item);",
			"\t\t}",
			"",
			"\t\treturn \\$recordList;",
			"",
			"\t}",
			"",
			"\tpublic function GetSingle(string \\$id): FreeModel {",
			"",
			"\t\t\\$record = \\$this->pdo->table(\\$this->table)->where('id', \\$id)->get();",
			"\t\treturn new FreeModel(\\$record);",
			"",
			"\t}",
			"",
			"\tpublic function Create(array \\$payloadData): FreeModel {",
			"\t\t\\$data = Converter::ToObject(\\$payloadData);",
			"",
			"\t\t\\$unidId = Generator::UniqId(\\$this->table);",
			"\t\t\\$data->id = \\$unidId;",
			"",
			"\t\t\\$this->pdo->table(\\$this->table)->insert(Converter::ToCreateArray(\\$data));",
			"",
			"\t\t\\$record = \\$this->pdo->table(\\$this->table)->where('id', \\$unidId)->get();",
			"\t\treturn new FreeModel(\\$record);",
			"",
			"\t}",
			"",
			"\tpublic function Update(array \\$payloadData): FreeModel {",
			"\t\t\\$data = Converter::ToObject(\\$payloadData);",
			"",
			"\t\t\\$this->pdo->table(\\$this->table)->where('id', \\$data->id)->update(Converter::ToUpdateArray(\\$data));",
			"",
			"\t\t\\$record = \\$this->pdo->table(\\$this->table)->where('id', \\$data->id)->get();",
			"\t\treturn new FreeModel(\\$record);",
			"",
			"\t}",
			"",
			"\tpublic function Delete(string \\$id) {",
			"",
			"\t\t\\$record = \\$this->pdo->table(\\$this->table)->where('id', \\$id)->get();",
			"\t\tValidator::Required(\\$record->id, 'Record not found.');",
			"",
			"\t\t\\$this->pdo->table(\\$this->table)->where('id', \\$id)->delete();",
			"\t\treturn null;",
			"",
			"\t}",
			"}"
		],
		"description": "Create a new repository."
	},
	"GetAll method for repository":{
		"prefix": "repository-getall",
		"body": [
			"public function GetAll(): array {",
			"",
			"\t\\$itemList = \\$this->pdo->table(\\$this->table)->getAll();",
			"",
			"\t\\$recordList = [];",
			"\tforeach (\\$itemList as \\$item) {",
			"\t\t\\$recordList[] = new FreeModel(\\$item);",
			"\t}",
			"",
			"\treturn \\$recordList;",
			"",
			"}"
		],
		"description": "Create a new get all method."
	},
	"GetSingle method for repository":{
		"prefix": "repository-getsingle",
		"body": [
			"public function GetSingle(string \\$id): FreeModel {",
			"",
			"\t\\$record = \\$this->pdo->table(\\$this->table)->where('id', \\$id)->get();",
			"\treturn new FreeModel(\\$record);",
			"",
			"}"
		],
		"description": "Create a new get single method."
	},
	"Create method for repository":{
		"prefix": "repository-create",
		"body": [
			"public function Create(array \\$payloadData): FreeModel {",
			"\t\\$data = Converter::ToObject(\\$payloadData);",
			"",
			"\t\\$unidId = Generator::UniqId(\\$this->table);",
			"\t\\$data->id = \\$unidId;",
			"",
			"\t\\$this->pdo->table(\\$this->table)->insert(Converter::ToCreateArray(\\$data));",
			"",
			"\t\\$record = \\$this->pdo->table(\\$this->table)->where('id', \\$unidId)->get();",
			"\treturn new FreeModel(\\$record);",
			"",
			"}"
		],
		"description": "Create a new create method."
	},
	"Update method for repository":{
		"prefix": "repository-update",
		"body": [
			"public function Update(array \\$payloadData): FreeModel {",
			"\t\\$data = Converter::ToObject(\\$payloadData);",
			"",
			"\t\\$this->pdo->table(\\$this->table)->where('id', \\$data->id)->update(Converter::ToUpdateArray(\\$data));",
			"",
			"\t\\$record = \\$this->pdo->table(\\$this->table)->where('id', \\$data->id)->get();",
			"\treturn new FreeModel(\\$record);",
			"",
			"}"
		],
		"description": "Create a new update method."
	},
	"Delete method for repository":{
		"prefix": "repository-delete",
		"body": [
			"public function Delete(string \\$id) {",
			"",
			"\t\\$record = \\$this->pdo->table(\\$this->table)->where('id', \\$id)->get();",
			"\tValidator::Required(\\$record->id, 'Record not found.');",
			"",
			"\t\\$this->pdo->table(\\$this->table)->where('id', \\$id)->delete();",
			"\treturn null;",
			"",
			"}"
		],
		"description": "Create a new delete method."
	}
}
